                                _          
     _____ ____   _____  _____ (_)____ ___ 
    / ___// __ \ / ___/ / ___// // __ `__ \
   (__  )/ /_/ // /__  (__  )/ // / / / / /
  /____/ \____/ \___/ /____//_//_/ /_/ /_/ [1]


    name: ABOUT.txt
    date: 2013AUG08
    prog: pr
    desc: description of ideas to build record

2013AUG10
* record.Meta
- basic testing against record/record.py
+ added record/test_tools.py
+ ammeded record/test_all.py
- all: fixes
- __add_default: added time format string setting
* testing
- record.Meta
+ fixes
- record.Record() done

2013AUG09
* added license
- <https://www.gnu.org/licenses/gpl-3.0.txt>

* couple of changes
- blocks.py
+ example code
- record.py
+ comment blocks added

* idea: like most ideas they take time to develop. This is how the idea stands as of now:
- we have blocks of metadata and a record block.
- a Record block contains a list of key/value pairs
- so a key/value pair can contain a Meta block with all the associated metadata.
- I like to think of these as lego like blocks that can be stacked together.
- so we have

    Record KEY
           title
           description   
           created
           ...
           n unique key/value pairs        
           ...

    Meta KEY
         title
         description
         created
         ...
         n unique key/value
         ...

* Combining
- so we can now combine Meta blocks with a Record block be creating a unique Meta block
  populating it with data

      # a red block of size 2, with 2x2 holes and weighs 10g
      meta_a = record.Meta("A", "This is the A meta block")
      meta_a.add("colour", "red")
      meta_a.add("size", 2)
      meta_a.add("weight", 10)
      meta_a.add("format", "2x2")

      # data looks like this
      meta_a.all()
      {
        "deleted": false,
        "key": "A",
        "value": [
            {
                "key": "title",
                "value": "A"
            },
            {
                "key": "description",
                "value": "This is the A meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "red"
            },
            {
                "key": "size",
                "value": 2
            },
            {
                "key": "weight",
                "value": 10
            },
            {
                "key": "format",
                "value": "2x2"
            }
        ]
      }


      # a yellow block of size 4, with 2x4 holes and weighs 20g
      meta_b = record.Meta("B", "This is the B meta block")
      meta_b.add("colour", "yellow")
      meta_b.add("size", 4)
      meta_b.add("weight", 20)
      meta_b.add("format", "2x4")
      
      # data looks like this
      meta_b.all()
      {
        "deleted": false,
        "key": "B",
        "value": [
            {
                "key": "title",
                "value": "B"
            },
            {
                "key": "description",
                "value": "This is the B meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "yellow"
            },
            {
                "key": "size",
                "value": 4
            },
            {
                "key": "weight",
                "value": 20
            },
            {
                "key": "format",
                "value": "2x4"
            }
        ]
      }


      # a blue block of size 1, with 1x1 holes and weighs 5g
      meta_c = record.Meta("C", "This is the C meta block")
      meta_c.add("colour", "blue")
      meta_c.add("size", 1)
      meta_c.add("weight", 10)
      meta_c.add("format", "1x1")

      # data looks like this
      meta_c.all()
      {
        "deleted": false,
        "key": "C",
        "value": [
            {
                "key": "title",
                "value": "C"
            },
            {
                "key": "description",
                "value": "This is the C meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "blue"
            },
            {
                "key": "size",
                "value": 1
            },
            {
                "key": "weight",
                "value": 10
            },
            {
                "key": "format",
                "value": "1x1"
            }
        ]
      }


* with me still?
- now I want to create a big block, called Blocks.

     # create a big block called Blocks and add block a, b & c together

     labels = record.Meta("bigblock", "This is a big block made up of A, B & C blocks")
     Blocks = record.Record(labels.all()

     Blocks.add("A", meta_a.all())
     Blocks.add("B", meta_b.all())
     Blocks.add("C", meta_c.all())

     # what does it look like?
     Blocks.all()
     [
      {
        "key": "title",
        "value": "bigblock"
      },
      {
        "key": "description",
        "value": "This is block is combined with A, B, C"
      },
      {
        "key": "created",
        "value": "2013AUG0914:54"
      },
      {
        "deleted": false,
        "key": "A",
        "value": [
            {
                "key": "title",
                "value": "A"
            },
            {
                "key": "description",
                "value": "This is the A meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "red"
            },
            {
                "key": "size",
                "value": 2
            },
            {
                "key": "weight",
                "value": 10
            },
            {
                "key": "format",
                "value": "2x2"
            }
        ]
      },
      {
        "deleted": false,
        "key": "B",
        "value": [
            {
                "key": "title",
                "value": "B"
            },
            {
                "key": "description",
                "value": "This is the B meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "yellow"
            },
            {
                "key": "size",
                "value": 4
            },
            {
                "key": "weight",
                "value": 20
            },
            {
                "key": "format",
                "value": "2x4"
            }
        ]
      },
      {
        "deleted": false,
        "key": "C",
        "value": [
            {
                "key": "title",
                "value": "C"
            },
            {
                "key": "description",
                "value": "This is the C meta block"
            },
            {
                "key": "created",
                "value": "2013AUG0914:54"
            },
            {
                "key": "colour",
                "value": "blue"
            },
            {
                "key": "size",
                "value": 1
            },
            {
                "key": "weight",
                "value": 10
            },
            {
                "key": "format",
                "value": "1x1"
            }
        ]
      }
    ]

* now we can save this as a file and use it a lot of different ways on the web, and that's good.



2013JULY

* idea:
    build a collection of valid data and a tool to add, update, verify.
    The idea is to do this via code to avoid invalid info that cannot be
    validated or traced.

* create a file of data in a semi stuctured format
* read data in 
- extract name, description, type
- read name:value pairs
* depending on type, auto-validate
* re-fomat into JSON
* save


[1] Title created with an ASCII text generator using 'slant' and 'stretch=Yes". 
The code is based on Figlet which can be found here ~ <http://www.figlet.org/>
[Last accessed: Sunday 4th August, 2013]
<http://www.network-science.de/ascii/>


vim: ff=unix:ts=4:sw=4:tw=78:noai:expandtab
